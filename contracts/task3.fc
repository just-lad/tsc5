#include "imports/stdlib.fc";

;; All the code in recv_internal, get_storage, wrap_storage, and version
;; serves as an example of the intended structure.

;; The provided code is an "empty wrapper." It:
;; + Parses "wrapped" incoming messages (discards versioning information)
;; + "Wraps" the call to the version-specific process_message
;; + Implements "get_storage" for version-specific get-methods
;; However, it does not yet implement any upgrade logic, which is your task.

;; The empty wrapper is provided to demonstrate
;; how version-specific code is intended to be "wrapped" and interacted with.
;; You may delete and rewrite as needed,
;; but the final implementation must adhere to the same structure

() recv_internal(int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
;; expected_version:uint32 new_code:(Maybe ^Cell) migrations:(HashmapE 32 MigrationPayload) payload:^Cell = InternalMsgBody;
    int expected_version = in_msg_body~load_uint(32); ;; The expected version
    cell update_code = in_msg_body~load_maybe_ref(); ;; the expected code cell or 0 if no code attached

    ;; new_version:uint32 migration_code:(Maybe ^Cell) = MigrationPayload;
    cell new_version = in_msg_body~load_dict(); ;; migrations dict aka MigrationPayload or 0 if no dict attached
    cell payload = in_msg_body~load_ref(); ;; payload to process

    ;; ---
    ;; here you should check if it's the first call or not based on `expected_version` as stated in the task
    ;; if it is the first call, wrap the storage and finish execution by returning from the function
    ;; ---
    if (expected_version == 0) {
        slice ds = get_data().begin_parse();
        cell storage = ds~load_ref();
        set_data(wrap_storage(1, storage));
        return();
    } else {
        ;; check expected_version == current
        if (expected_version == version()) {
            ;; expected_version == current
            slice ds = get_data().begin_parse();
            cell storage = ds~load_ref();
            storage = process_message(storage, msg_value, balance, in_msg_full, payload.begin_parse());
            set_data(wrap_storage(1, storage));
            return();
        }

        ;; check expected_version > current => check update_code not null => update
        if (expected_version > version()) {
            throw_if(200, cell_null?(update_code));
            throw_if(400, dict_empty?(new_version));
            int ver = version();
            cell storage = get_storage();
            while (ver != expected_version) {
                (slice mig_load, int flag) = new_version.udict_get?(32, ver);
                throw_unless(400, flag);
                int new_ver = mig_load~load_uint(32);
                throw_unless(400, new_ver != ver + 1);
                cell mig_code = mig_load~load_maybe_ref();
                if (~ cell_null?(mig_code)) {
                    storage = get_storage();
                    set_c3(mig_code.begin_parse().bless());
                    storage = migrate_one(storage);
                    set_data(wrap_storage(new_ver, storage));
                }
                ver = new_ver;
            }
            storage = process_message(get_storage(), msg_value, balance, in_msg_full, payload.begin_parse());
            set_data(wrap_storage(ver, storage));
            set_code(update_code);
            return();
        }
    }
}

cell get_storage() {
    slice cs = get_data().begin_parse();

    ;; Logic to extract the storage on which the version-specific process_message and get-methods operate
    int version_id = cs~load_uint(32);
    cell storage = cs~load_ref();

    return storage;
}

cell wrap_storage(int version_id, cell storage) {
    ;; add additional data required for versioning in this cell
    return begin_cell()
        .store_uint(version_id, 32)
        .store_ref(storage)
    .end_cell();
}

;; Return the current version of the smart contract
int version() method_id {
    slice cs = get_data().begin_parse();
    return cs~load_uint(32);
}

;; <<<<< Custom version-specific code begins
;; This section (everything between << and >> characters) will be fully substituted for each version.
;; This is an IMPORTANT part, and these exact lines with <<<<< and >>>>> must be present in your code for the testing system to work correctly.
;; All the code provided here serves as an example of the version-code, which your update code must be compatible with.
;; Refer to the "3-example" directory for more version examples.

;; from counter-v0.fc
cell process_message(cell storage, int msg_value, int balance, cell in_msg_full, slice in_msg_body) impure {
    slice cs = storage.begin_parse();
    int current_amount = cs.preload_uint(32);
    return begin_cell().store_uint(current_amount + 1, 32).end_cell();
}

cell migrate_one(cell old_storage) { ;; it's just a placeholder that is required for correct compilation
    return old_storage;
}

;; Custom version-specific code ends >>>>>

