#include "imports/stdlib.fc";

int equal_ints (int a, int b) asm "EQUAL";
int throw_ifnot (int a, int b) asm "THROWARGIFNOT";

;; STORAGE TL-B
;; storage$_ public_key:uint256 execution_time:uint32 receiver:MsgAddressInt seqno:uint32 = Storage;
() save_data (int public_key, int execution_time, int receiver, int seqno) impure inline {
    set_data(
        begin_cell()
        .store_uint(public_key, 256)
        .store_uint(execution_time, 32)
        .store_uint(receiver, 2 + 1 + 8 + 256)
        .store_uint(seqno, 32)
        .end_cell());
}

;; STORAGE TL-B
;; storage$_ public_key:uint256 execution_time:uint32 receiver:MsgAddressInt seqno:uint32 = Storage;
(int, int, int, int) load_data () inline {
    var ds = get_data().begin_parse();
    return (ds~load_uint(256), ds~load_uint(32), ds~load_uint(2 + 1 + 8 + 256), ds~load_uint(32));
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    int op = in_msg_body~load_int(32);

    if (op == 0x9df10277) {
        ;; update#9df10277 signature:bits512 ^[ locked_for:uint32 new_seqno:uint32 ] = ExtInMsgBody
        var signature = in_msg_body~load_bits(512);
        var msghash = in_msg_body.preload_ref().cell_hash();
        var cs1 = in_msg_body~load_ref().begin_parse();
        int locked_for = cs1~load_uint(32);
        int new_seqno = cs1~load_uint(32);


        (int public_key, int execution_time, int receiver, int seqno) = load_data();

        throw_unless(119, equal_ints(seqno + 1, new_seqno));
        throw_unless(120, check_signature(msghash, signature, public_key));
        throw_if(121, locked_for <= 0);
        throw_if(122, execution_time < now());
        throw_if(123, now() + locked_for < execution_time);

        save_data(public_key, now() + locked_for, receiver, new_seqno);
    }

    if (op == 0xbb4be234) {
        ;; claim#bb4be234 = ExtInMsgBody
    }
}

