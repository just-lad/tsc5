#include "imports/stdlib.fc";

;; STORAGE TL-B
;; - admin_address: MsgAddressInt
;; - users: (HashmapE 256 uint32)

;; set_data(begin_cell()
;;     .store_uint(public_key, 256)
;;     .store_uint(now() + locked_for, 32)
;;     .store_uint(0, 11)                  
;;     .store_uint(receiver, 256)
;;     .store_uint(new_seqno, 32)
;;     .end_cell());

slice parse_sender_address (cell in_msg_full) impure inline {
    var cs = in_msg_full.begin_parse();
    var flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    return sender_address;
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_bits() < 32) {
        return ();
    }
    int op = in_msg_body~load_uint(32);

    ;; add_user#368ddef3 query_id:uint64 address:MsgAddressInt share:uint32 = InternalMsgBody;
    if (op == 0x368ddef3) { 
        slice local_storage = get_data().begin_parse();     ;; get data
        local_storage~skip_bits(11); ;; skip flags and workchain
        int admin_addr = local_storage~load_uint(256);   ;; read admin address to check

        var cs = in_msg_full.begin_parse();
        cs~skip_bits(15);
        int sender = cs~load_uint(256);

        throw_unless(120, admin_addr == sender); ;; check sender == admin, throw 120 (not admin)
        
        in_msg_body~skip_bits(64 + 11);
        int user_n = in_msg_body~load_uint(256);            ;; get user address as int (MsgAddressInt = 11 + 256)
        int share = in_msg_body~load_uint(32);              ;; ger user's share
        slice share_n = begin_cell().store_uint(share, 32).end_cell().begin_parse();

        cell dict1 = new_dict();

        if (~ slice_empty?(local_storage)) {
            dict1 = local_storage~load_dict();                              ;; load hashmap if it exists
            (slice share_l, int flag) = dict1.udict_get?(256, user_n);    ;; get user and share from storage
            if (~ flag) {                                   ;; check if exists in dict
                dict1~udict_set(256, user_n, share_n);                      ;; not exist -> add
            } else {
                dict1~udict_replace?(256, user_n, share_n);                 ;; exist -> update
        }
        } else {
            ;; dict empty
            dict1~udict_set(256, user_n, share_n);                          ;; not exist -> add
        }

        set_data(begin_cell()                                               ;; save storage
                        .store_slice(begin_cell().store_uint(0, 11).store_uint(admin_addr, 256).end_cell().begin_parse())
                        .store_dict(dict1)
                        .end_cell());    
        
    }

    ;; remove_user#278205c8 query_id:uint64 address:MsgAddressInt = InternalMsgBody;
    if (op == 0x278205c8) {
        slice local_storage = get_data().begin_parse();     ;; get data
        local_storage~skip_bits(11);                        ;; skip flags and workchain
        int admin_addr = local_storage~load_uint(256);      ;; read admin address to check

        var cs = in_msg_full.begin_parse();
        cs~skip_bits(15);
        int sender = cs~load_uint(256);

        throw_unless(120, admin_addr == sender); ;; check sender == admin, throw 120 (not admin)

        cell dict1 = new_dict();
        if (~ slice_empty?(local_storage)) { 
            dict1 = local_storage~load_dict();              ;; load hashmap if it exists

            in_msg_body~skip_bits(64 + 11);
            int user_n = in_msg_body~load_uint(256);                        ;; get user address as int (MsgAddressInt = 11 + 256)
            int share = in_msg_body~load_uint(32);                          ;; get user's share
            slice share_n = begin_cell().store_uint(share, 32).end_cell().begin_parse();
            (slice share_l, int flag) = dict1.udict_get?(256, user_n);      ;; get user and share from storage
            if (flag) {     ;; user exists -> delete
                (cell dict1, int flag) = udict_delete?(dict1, 256, user_n); ;; user exists -> delete
            } else {
                throw(121);                 ;; user not exist -> throw 121
            }
        } else {                            ;; dict empty
            throw(121);                     ;; user not exist -> throw 121
        }
        
        set_data(begin_cell()               ;; save storage
                        .store_slice(begin_cell()
                                        .store_uint(0, 11)
                                        .store_uint(admin_addr, 256)
                                        .end_cell()
                                        .begin_parse())     ;; to get Slice
                        .store_dict(dict1)
                        .end_cell()); 
    }

    ;; split_ton#068530b3 query_id:uint64 = InternalMsgBody;
    if (op == 0x068530b3) {
        ;; distributes the TON to users according to their shares
        ;; mode 1, no body
        ;; `user_share * amount / total_share`

        int total_share = 0;
        slice local_storage = get_data().begin_parse();
        local_storage~skip_bits(11 + 256);

        cell dict1 = new_dict();
        if (~ slice_empty?(local_storage)) { 
            dict1 = local_storage~load_dict();              ;; load hashmap if it exists
            (int key, slice val, int flag) = dict1.udict_get_min?(256);
            throw_unless(122, flag);

            ;; total_share counting routin
            while (flag) {
                int share_t = val.preload_uint(32);
                total_share += share_t;
                (key, val, flag) = dict1.udict_get_next?(256, key);
            }
            ;; sending routin 
            (int key, slice val, int flag) = dict1.udict_get_min?(256);
            while (flag) {
                int share = val~load_uint(32);
                int to_send = ((share * msg_value) / total_share);

                var msg = begin_cell()
                    .store_uint(0x18, 6)    ;; flags
                    .store_uint(1024, 11)      ;; address 11 bit
                    .store_uint(key, 256)   ;; address 256 bit
                    .store_coins(to_send)   ;; value
                    .store_uint(0, 107)     ;; default
                    .end_cell();
                send_raw_message(msg, 1);
                (key, val, flag) = dict1.udict_get_next?(256, key);
            }
            return();
        }
    }

    ;; transfer_notification#7362d09c query_id:uint64 amount:Coins = InternalMsgBody;
    if (op == 0x7362d09c) {
        ;; throw 122 (no users) or transfer jettons, send messages to the address of your token jack `jetton_address`
        
        int total_share = 0;
        int query_id = in_msg_body~load_uint(64);
        int amount = in_msg_body~load_coins();

        int total_share = 0;
        slice local_storage = get_data().begin_parse();
        local_storage~skip_bits(11 + 256);

        cell dict1 = new_dict();
        if (~ slice_empty?(local_storage)) { 
            dict1 = local_storage~load_dict();              ;; load hashmap if it exists
            (int key, slice val, int flag) = dict1.udict_get_min?(256);
            throw_unless(122, flag);
            var cs = in_msg_full.begin_parse();
            cs~skip_bits(4);
            slice jetton_addr = cs~load_msg_addr();

            ;; total_share counting routin
            while (flag) {
                int share_t = val.preload_uint(32);
                total_share += share_t;
                (key, val, flag) = dict1.udict_get_next?(256, key);
            }
            ;; sending Jettons according to share 
            (int key, slice val, int flag) = dict1.udict_get_min?(256);
            while (flag) {
                int share = val~load_uint(32);
                int to_send = ((share * amount) / total_share);
                cell msg = begin_cell()
                    .store_uint(0x18, 6)                        ;; flags
                    .store_slice(jetton_addr)                   ;; destination address
                    .store_coins(20000000)                      ;; Message Value: 0.02 TON
                    .store_uint(0, 107)                         ;; default
                    .store_ref(begin_cell()                     ;; Cell with TokenTransfer
                                .store_uint(0x0f8a7ea5, 32)
                                .store_uint(query_id, 64)       ;; query_id
                                .store_coins(to_send)           ;; amount of jettons
                                .store_uint(1024, 11)
                                .store_uint(key, 256)           ;; recipient address
                                .store_uint(1024, 11)
                                .store_uint(key, 256)           ;; Response address must be equal to the recipient address         
                                ;;.store_uint(0, 1)               ;; Maybe
                                .store_coins(1)                 ;; Forward_amount = 1 nanoTON 
                                ;;.store_uint(0, 1)               ;; Either
                                .end_cell())     
                    .end_cell();
                send_raw_message(msg, 1);                       ;; mode = 1
                (key, val, flag) = dict1.udict_get_next?(256, key);
            }
        } else {
            throw(122);
        }
    }
}

() recv_external(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

cell get_users() method_id {
    slice ds = get_data().begin_parse();
    ds~skip_bits(267);
    return ds~load_dict();
}

;; Formula for calculating the number of tokens: `user_share * amount / total_share`
int get_user_share(slice user_address) method_id {
    slice ls = get_data().begin_parse();
    ls~skip_bits(267);
    cell dict1 = ls~load_dict();
    user_address~skip_bits(11);
    (slice share_l, int flag) = dict1.udict_get?(256, user_address~load_uint(256));
    return share_l~load_uint(32);
}