#include "imports/stdlib.fc";
;; Select start point, mark with 0
;; Mark all unlabeled neighbors of points marked with i with i+1
;; go to the target point
;; go to next node that has a lower mark than the current node
;; add this node to path UNTIL (start point reached)

(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple) to_tuple (X x) asm "NOP";
forall X -> (tuple, X) ~tpop (tuple t) asm "TPOP";

forall X -> (tuple) tset (tuple tpl, int index, X value) {
    tuple rtpl = empty_tuple();
    int lena = tlen(tpl);
    int c = 0;
    while (c < lena) {
        int action = tpl.at(c);
        if (c != index) {
            rtpl~tpush(action);
        } else {
            rtpl~tpush(value);
        }
        c += 1;  
    }
    return (rtpl);
}

;; input: list - list of points to visit, matrix - decrypted maze
;; output: tuple - point(x,y) with minimal length, tuple - to_visit with deleted min point
(tuple, tuple) tmin (tuple list, tuple matrix) impure inline {
    tuple min_point = empty_tuple();
    int min_v = 1000000000;
    int new_v = 1000000000;
    int min_i = 0;
    int i = 0;
    while (i < list.tlen()) {
        new_v = matrix.at(list.at(i).at(0)).at(list.at(i).at(1)).at(0); ;; val at point [i] from list of points from matrix
        if ( new_v < min_v ) {
            min_v = new_v;
            min_point = list.at(i);
            min_i = i;
        }
        i += 1;
    }

    tuple new_list = empty_tuple();
    i = 0;
    while (i < list.tlen()) {
        int el = list.at(i);
        if (i != min_i) {
            new_list~tpush(el);
        }
        i += 1;  
    }
    return (min_point, new_list);
}

;; input: n - rows of init maze, m - columns of init maze, maze - init maze with symbols
;; output: tuple - start point (x,y), tuple - end point (x,y), tuple - decrypted init maze
(tuple, tuple, tuple) decrypt (int n, int m, tuple maze) impure inline {
    tuple decrypted = empty_tuple();
    tuple decrypted_row = empty_tuple();
    tuple start_p = empty_tuple();
    tuple end_p = empty_tuple();

    int i = 0;
    int j = 0;

    while (i < n) {
        while (j < m) {                         
            if (maze.at(i).at(j) == 0x2e) {         ;; . - no obstacles = 0x2e
                tuple point = to_tuple([0,1]);
                decrypted_row~tpush(point);         ;; length = 0, weihth = 1
            }
            if (maze.at(i).at(j) == 0x58) {         ;; X - obstacle = 0x58
                ;; decrypted_row~tpush(0);             ;; length = 0
                ;; decrypted_row~tpush(1000001);       ;; weihth = 1.000.001
                tuple point = to_tuple([0,1000001]);
                decrypted_row~tpush(point);
            }
            if (maze.at(i).at(j) == 0x3f) {         ;; ? - obstacle in superposition = 0x3f
                ;; decrypted_row~tpush(0);             ;; length = 0
                ;; decrypted_row~tpush(1001);          ;; weihth = 1.001
                tuple point = to_tuple([0,1001]);
                decrypted_row~tpush(point);
            }
            if (maze.at(i).at(j) == 0x53) {         ;; S - start = 0x53
                ;; decrypted_row~tpush(0);             ;; length = 0
                ;; decrypted_row~tpush(1);             ;; weihth = 1
                tuple point = to_tuple([0,1]);
                decrypted_row~tpush(point);

                start_p = to_tuple([i, j]);
            }
            if (maze.at(i).at(j) == 0x45) {         ;; E - end = 0x45
                ;; decrypted_row~tpush(0);             ;; length = 0
                ;; decrypted_row~tpush(1);             ;; weihth = 1
                tuple point = to_tuple([0,1]);
                decrypted_row~tpush(point);
                end_p = to_tuple([i, j]);             
            }
            j += 1;
        }
        j = 0;
        i += 1;
        decrypted~tpush(decrypted_row);
        decrypted_row = empty_tuple();
    }
    return (start_p, end_p, decrypted);
}

;; input: start - start point (x,y), decrypted - decrypted maze
;; output: tuple - forwardtraced maze
(tuple) forwardtrace (tuple start, tuple decrypted) impure inline {
    ;; forwardtrace
    tuple to_visit = to_tuple([start]);
    tuple cur_p = to_visit.at(0);
    while (to_visit.tlen() > 0) {
        int cur_x = cur_p.at(0);
        int cur_y = cur_p.at(1);
        int new_x = cur_x - 1;
        int new_y = cur_y - 1;
        while (new_x < (cur_x + 2)) {
            ;; row [x]
            while (new_y < (cur_y + 2)) {
                ;; cell [x, y]
                if ((new_y >= 0) &                                                  ;; index must be >= 0
                    (new_x >= 0) &                                                  ;; index must be >= 0
                    (new_x < decrypted.tlen())) {                                   ;; index must be < len)
                    if (new_y < decrypted.at(new_x).tlen()) {                       ;; index must be < len
                        if ((~((new_x == cur_x) & (new_y == cur_y))) &               ;; cell is not current cell
                            (~((new_x == start.at(0)) & (new_y == start.at(1))))) {  ;; cell is not start cell
                            ;; code to calculate new length at new_p
                            int new_lenght = decrypted.at(cur_x).at(cur_y).at(0) + decrypted.at(new_x).at(new_y).at(1);
                            if (decrypted.at(new_x).at(new_y).at(0) == 0) {             ;; point is unvisited, mark new length
                                ;; code to change length at [new_x, new_y] to new_length
                                tuple new_vals = empty_tuple();
                                new_vals~tpush(new_lenght);
                                new_vals~tpush(decrypted.at(new_x).at(new_y).at(1));
                                tuple temp_row = decrypted.at(new_x);
                                temp_row = tset(temp_row, new_y, new_vals);
                                decrypted = tset(decrypted, new_x, temp_row);
                                to_visit~tpush(to_tuple([new_x, new_y]));
                            } else {
                                if (decrypted.at(new_x).at(new_y).at(0) > new_lenght) { ;; point is visited but has shorter way, mark new length
                                    ;; code to change length at [new_x, new_y] to new_length
                                    tuple new_vals = empty_tuple();
                                    new_vals~tpush(new_lenght);
                                    new_vals~tpush(decrypted.at(new_x).at(new_y).at(1));
                                    tuple temp_row = decrypted.at(new_x);
                                    temp_row = tset(temp_row, new_y, new_vals);
                                    decrypted = tset(decrypted, new_x, temp_row);
                                }
                            }
                        }
                    }
                }
                new_y += 1;
            }
            new_y = cur_y - 1;
            new_x += 1;
        }
        ;; take new cur_point as closest to start from all to_visit cells
        (cur_p, to_visit) = tmin(to_visit, decrypted);
    }
    return decrypted;
}

;; input: start - start point (x,y), end - end point (x,y), decrypted - decrypted maze
;; output: tuple - points of path [[point], [point], ...]
(tuple) backtrace (tuple start, tuple end, tuple forwardtraced) impure inline {
    ;; backtrace
    tuple succ_path = empty_tuple();
    tuple to_visit = empty_tuple();
    tuple cur_p = end;

    while (~((cur_p.at(0) == start.at(0)) & (cur_p.at(1) == start.at(1)))) {
        int cur_x = cur_p.at(0);
        int cur_y = cur_p.at(1);
        int new_x = cur_x - 1;
        int new_y = cur_y - 1;
        while (new_x < (cur_x + 2)) {
            ;; row [x]
            while (new_y < (cur_y + 2)) {
                ;; cell [x, y]
                if ((new_y >= 0) &                                                  ;; index must be >= 0
                    (new_x >= 0) &                                                  ;; index must be >= 0
                    (new_x < forwardtraced.tlen())) {                               ;; index must be < len)
                    if (new_y < forwardtraced.at(new_x).tlen()) {                   ;; index must be < len
                        if (~((new_x == cur_x) & (new_y == cur_y))) {               ;; cell is not current cell
                            ;; mark to_visit
                            to_visit~tpush(to_tuple([new_x, new_y]));
                        }
                    }
                }
                new_y += 1;
            }
            new_y = cur_y - 1;
            new_x += 1;
        }
        (cur_p, _) = tmin(to_visit, forwardtraced);
        succ_path~tpush(cur_p);
    }
    succ_path~tpop();
    return succ_path;
}

;; input: succ_path - points of path [[point], [point], ...], maze - init maze to draw path in
;; output: tuple - maze with drawn path
(tuple) make_solution (tuple succ_path, tuple maze) impure inline {
    ;; succ_path now have points [i][j] from the end (exclusive) to the start (exclusive)
    int i = succ_path.tlen() - 1;
    while (i >= 0) {
        ;; change cell [i] in the maze to '!'
        tuple temp = maze.at(succ_path.at(i).at(0)); 
        if (temp.at(succ_path.at(i).at(1)) != 0x53) {           ;; S - start = 0x53
            temp = tset(temp, succ_path.at(i).at(1), 0x21);     ;; ! - path = 0x21
            maze = tset(maze, succ_path.at(i).at(0), temp);
        }
        i -= 1;
    }
    return maze;
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;;
}


(int, int, int, tuple) solve(int n, int m, tuple maze) method_id {
    set_gas_limit(100000000);
    if (maze.tlen() == 0) {
        return (0, 0, 0, null());
    }

    ;; decrypt maze into struct:
    ;;     [[point0, point1, point2],
    ;;      [point3, point4, point5],
    ;;      [point6, point7, point8]]
    ;; where point struct is:
    ;;      [init_length, weight]
    ;; X weights 1.000.001
    ;; ? weight 1.001
    ;; . weight 1
    (tuple start_p, tuple end_p, tuple decrypted) = decrypt(n, m, maze);

    ;; forwardtrace decrypted maze to get proper length
    ;; so that points are [real_length, weight]
    tuple forwardtraced = forwardtrace(start_p, decrypted);
    int encrypted_len = forwardtraced.at(end_p.at(0)).at(end_p.at(1)).at(0);
    
    ;; backtrace forwardtraced decrypted maze to get path as
    ;; [path_point0, path_point1, path_point2]
    ;; where path_point is [x_coord, y_coord]
    tuple succ_path = backtrace(start_p, end_p, forwardtraced);

    ;; make_solution from path_points into init_maze
    maze = make_solution(succ_path, maze);

    int walls = (encrypted_len / 1000000);
    int probability = ((encrypted_len - (1000000 * walls)) / 1000);
    int length = encrypted_len - (walls * 1000000) - (probability * 1000);

    return (walls, probability, length, maze);
}
